# -*- coding: utf-8 -*-
"""TRABALHO FINALIZADO_estruturadados_0512.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UzPz17_5RlO6xE9Lv8rf7O9Zj8rLMlLi
"""

##### COLETA INFORMAÇÕES SOBRE DETERMINADO MEDICAMENTO #####
def coletar_informacoes_medicamento():
    medicamento = []

    medicamento.append(input("Digite o NOME do remédio: "))

    print("\nEscolha o laboratório:")
    laboratorios = [
        "BAYER S.A",
        "ELI LILLY DO BRASIL",
        "EMS SIGMA PHARMA",
        "CIMED INDÚSTRIA DE MEDICAMENTOS LTDA",
        "BRAINFARMA INDÚSTRIA QUÍMICA E FARMACÊUTICA S.A",
        "SANOFI MEDLEY FARMACÊUTICA LTDA.",
        "BRISTOL-MYERS SQUIBB FARMACÊUTICA LTDA",
        "ASTRAZENECA DO BRASIL LTDA",
        "BIOSINTÉTICA FARMACÊUTICA LTDA",
        "EMS S/A"
    ]
    laboratorios.sort()
    for i, lab in enumerate(laboratorios):
        print(f"{i}. {lab}")

    escolha_laboratorio = int(input("Digite o NÚMERO correspondente ao LABORATÓRIO: "))
    medicamento.append(laboratorios[escolha_laboratorio])

    print("\nEscolha a Classe Terapêutica:")
    classes_terapeuticas = [
        "CORTICOESTERÓIDES ASSOCIADOS A ANTIMICOTICOS",
        "AGENTES ANTI-REUMÁTICOS ESPECÍFICOS",
        "INIBIDORES DE PROTEINA QUINASE",
        "INIBIDORES PREOTEÍNA KINASE ANTINEOPLÁSICOS, OUTROS",
        "ANTIDIABÉTICOS INIBIDORES ALFA-GLUCOSIDASE",
        "EXPECTORANTES",
        "ANTIRREUMÁTICOS NÃO ESTEROIDAIS PUROS",
        "CORTICOESTERÓIDES TÓPICOS PUROS",
        "HORMÔNIOS ANTIANDROGÊNICOS CITOSTÁTICOS",
        "HORMÔNIOS CONTRACEPTIVOS MONOFÁSICOS COM ESTROGÊNIOS <50MCG"
    ]
    classes_terapeuticas.sort()
    for i, classe in enumerate(classes_terapeuticas):
        print(f"{i}. {classe}")

    escolha_classe_terapeutica = int(input("Digite o número correspondente à classe terapêutica: "))
    medicamento.append(classes_terapeuticas[escolha_classe_terapeutica])

    print("\nEscolha o Tipo de Produto:")
    tipos_produto = [
        "Novo",
        "Biológico",
        "Genérico",
        "Similar"
    ]
    tipos_produto.sort()
    for i, tipo in enumerate(tipos_produto):
        print(f"{i}. {tipo}")

    escolha_tipo_produto = int(input("Digite o número correspondente ao tipo de produto: "))
    medicamento.append(tipos_produto[escolha_tipo_produto])

    print("\nEscolha a Restrição Hospitalar:")
    restricoes_hospitalares = [
        "Sim",
        "Não"
    ]
    restricoes_hospitalares.sort()
    for i, restricao in enumerate(restricoes_hospitalares):
        print(f"{i}. {restricao}")

    escolha_restricao_hospitalar = int(input("Digite o número correspondente à restrição hospitalar: "))
    medicamento.append(restricoes_hospitalares[escolha_restricao_hospitalar])

    print("\nEscolha a Tarja:")
    tarjas = [
        "Vermelha",
        "Preta"
    ]
    tarjas.sort()
    for i, tarja in enumerate(tarjas):
        print(f"{i}. {tarja}")

    escolha_tarja = int(input("Digite o número correspondente à tarja: "))
    medicamento.append(tarjas[escolha_tarja])

    return medicamento

##### FUNÇÃO DE ORDENAÇÃO UTILIZANDO ALGORITMO BUBBLE SORT #####
def bubble_sort(lista):
    n = len(lista)
    for i in range(n):
        for j in range(0, n - i - 1):
            if lista[j][0].lower() > lista[j + 1][0].lower():
                lista[j], lista[j + 1] = lista[j + 1], lista[j]

##### ALGORITMO DE BUSCA POR NOME #####
def buscar_medicamento_por_nome(nome, medicamentos):
    for medicamento in medicamentos:
        if medicamento[0].lower() == nome.lower():
            return medicamento
    return None

##### ALGORITMO DE BUSCA POR ÍNDICE #####
def buscar_medicamento_por_indice(indice, medicamentos):
    if 0 <= indice < len(medicamentos):
        return medicamentos[indice]
    else:
        return None

##### ALGORITMO PARA REMOVER MEDICAMENTO POR ÍNDICE #####
def remover_medicamento_por_indice(indice, medicamentos):
    if 0 <= indice < len(medicamentos):
        medicamento_removido = medicamentos.pop(indice)
        print(f"Medicamento removido: {medicamento_removido[0]}")
    else:
        print("Índice inválido. Nenhum medicamento removido.")

##### LISTA NOVA COM OS MEDICAMENTOS ADCIONADOS #####
todos_medicamentos = []

##### MENU #####
while True:
    print("\nMenu:")
    print("1 - Registrar um medicamento")
    print("2 - Buscar um medicamento por nome")
    print("3 - Buscar um medicamento por índice")
    print("4 - Remover um medicamento por índice")
    print("5 - Mostrar todos os medicamentos em ordem alfabética")
    print("0 - Sair")

    opcao = input("Escolha uma opção: ")

    if opcao == '1':
        medicamento_atual = coletar_informacoes_medicamento()
        todos_medicamentos.append(medicamento_atual)

        print("\nInformações do medicamento atual:")
        for i, info in enumerate(medicamento_atual):
            print(f"{i + 1}. {info}")

    elif opcao == '2':
      nome_busca = input("Digite o nome do medicamento que deseja buscar: ")
      medicamento_encontrado = buscar_medicamento_por_nome(nome_busca, todos_medicamentos)

      if medicamento_encontrado:
        indice_medicamento = todos_medicamentos.index(medicamento_encontrado) + 1
        print(f"\nMedicamento encontrado no índice {indice_medicamento}:")
        for info in medicamento_encontrado:
            print(info)
      else:
        print("Medicamento não encontrado.")

    elif opcao == '3':
      indice_busca = int(input("Digite o índice do medicamento que deseja buscar: "))
      medicamento_por_indice = buscar_medicamento_por_indice(indice_busca - 1, todos_medicamentos)

      if medicamento_por_indice is not None:
        indice_medicamento = todos_medicamentos.index(medicamento_por_indice) + 1
        print(f"\nMedicamento encontrado no índice {indice_medicamento}")
        for info in medicamento_por_indice:
            print(info)
      else:
        print("Medicamento não encontrado. Índice inválido.")

    elif opcao == '4':
        indice_remover = int(input("Digite o índice do medicamento que deseja remover: "))
        remover_medicamento_por_indice(indice_remover - 1, todos_medicamentos)

    elif opcao == '5':
        ##### CHAMA FUNÇÃO BUBBLE SORT PARA ORDENAR POR ORDEM ALFABÉTICA #####
        bubble_sort(todos_medicamentos)
        print("\nTodos os medicamentos em ordem alfabética:")
        print("=" * 40)
        print("Índice | Nome do Medicamento")
        for indice, medicamento in enumerate(todos_medicamentos, start=1):
            print(f"{indice:<3} | {medicamento[0]}")

    elif opcao == '0':
        print("ADEUS!")
        break

    else:
        print("Opção inválida. Tente novamente.")